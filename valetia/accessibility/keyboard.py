"""
Gestionnaire avanc√© de raccourcis clavier pour ValetIA.

Ce module fournit des fonctionnalit√©s avanc√©es pour la navigation
au clavier, avec prise en charge de commandes complexes et contextuelle.
"""

import streamlit as st
import json
from valetia.logger.loguru_adapter import loguru_logger as logger
from .config import get_accessibility_config

# D√©finition des actions pour les raccourcis clavier
KEYBOARD_ACTIONS = {
    # Navigation g√©n√©rale
    "go_home": {
        "description": "Naviguer vers l'accueil",
        "js_code": """
            // Simuler un clic sur le s√©lecteur de module pour Accueil
            document.querySelector('div[data-baseweb="select"] select option[value="Accueil"]').selected = true;
            document.querySelector('div[data-baseweb="select"] select').dispatchEvent(new Event('change', {'bubbles': true}));
        """
    },
    "go_document_analysis": {
        "description": "Naviguer vers l'analyse de document",
        "js_code": """
            // Simuler un clic sur le s√©lecteur de module pour Analyse de Document
            document.querySelector('div[data-baseweb="select"] select option[value="Analyse de Document"]').selected = true;
            document.querySelector('div[data-baseweb="select"] select').dispatchEvent(new Event('change', {'bubbles': true}));
        """
    },
    "go_copropriete": {
        "description": "Naviguer vers le module Copropri√©t√©",
        "js_code": """
            // Simuler un clic sur le s√©lecteur de module pour Copropri√©t√©
            document.querySelector('div[data-baseweb="select"] select option[value="Copropri√©t√©"]').selected = true;
            document.querySelector('div[data-baseweb="select"] select').dispatchEvent(new Event('change', {'bubbles': true}));
        """
    },
    "go_prudhommes": {
        "description": "Naviguer vers le module Prud'hommes",
        "js_code": """
            // Simuler un clic sur le s√©lecteur de module pour Prud'hommes
            document.querySelector('div[data-baseweb="select"] select option[value="Prud'hommes"]').selected = true;
            document.querySelector('div[data-baseweb="select"] select').dispatchEvent(new Event('change', {'bubbles': true}));
        """
    },
    "go_succession": {
        "description": "Naviguer vers le module Succession",
        "js_code": """
            // Simuler un clic sur le s√©lecteur de module pour Succession
            document.querySelector('div[data-baseweb="select"] select option[value="Succession"]').selected = true;
            document.querySelector('div[data-baseweb="select"] select').dispatchEvent(new Event('change', {'bubbles': true}));
        """
    },
    
    # Actions d'accessibilit√©
    "toggle_accessibility_panel": {
        "description": "Ouvrir/fermer les param√®tres d'accessibilit√©",
        "js_code": """
            // Trouver et cliquer sur l'en-t√™te des param√®tres d'accessibilit√©
            const headers = Array.from(document.querySelectorAll('h3'));
            const accessibilityHeader = headers.find(h => h.textContent.includes('Accessibilit√©'));
            if (accessibilityHeader) {
                accessibilityHeader.click();
            }
        """
    },
    "increase_contrast": {
        "description": "Augmenter le contraste",
        "js_code": """
            // Logique pour augmenter le contraste
            const selectElements = Array.from(document.querySelectorAll('div[data-baseweb="select"] select'));
            const contrastSelect = selectElements.find(select => 
                Array.from(select.options).some(option => option.text.includes('Contraste'))
            );
            
            if (contrastSelect) {
                const currentIndex = contrastSelect.selectedIndex;
                if (currentIndex < contrastSelect.options.length - 1) {
                    contrastSelect.selectedIndex = currentIndex + 1;
                    contrastSelect.dispatchEvent(new Event('change', {'bubbles': true}));
                }
            }
        """
    },
    "decrease_contrast": {
        "description": "Diminuer le contraste",
        "js_code": """
            // Logique pour diminuer le contraste
            const selectElements = Array.from(document.querySelectorAll('div[data-baseweb="select"] select'));
            const contrastSelect = selectElements.find(select => 
                Array.from(select.options).some(option => option.text.includes('Contraste'))
            );
            
            if (contrastSelect) {
                const currentIndex = contrastSelect.selectedIndex;
                if (currentIndex > 0) {
                    contrastSelect.selectedIndex = currentIndex - 1;
                    contrastSelect.dispatchEvent(new Event('change', {'bubbles': true}));
                }
            }
        """
    },
    "increase_text_size": {
        "description": "Augmenter la taille du texte",
        "js_code": """
            // Logique pour augmenter la taille du texte
            const sliders = Array.from(document.querySelectorAll('input[type="range"]'));
            const textSizeSlider = sliders.find(slider => 
                slider.parentElement.textContent.includes('Taille du texte')
            );
            
            if (textSizeSlider) {
                const max = parseInt(textSizeSlider.max);
                const step = parseInt(textSizeSlider.step) || 1;
                const newValue = Math.min(max, parseInt(textSizeSlider.value) + step);
                textSizeSlider.value = newValue;
                textSizeSlider.dispatchEvent(new Event('change', {'bubbles': true}));
            }
        """
    },
    "decrease_text_size": {
        "description": "Diminuer la taille du texte",
        "js_code": """
            // Logique pour diminuer la taille du texte
            const sliders = Array.from(document.querySelectorAll('input[type="range"]'));
            const textSizeSlider = sliders.find(slider => 
                slider.parentElement.textContent.includes('Taille du texte')
            );
            
            if (textSizeSlider) {
                const min = parseInt(textSizeSlider.min);
                const step = parseInt(textSizeSlider.step) || 1;
                const newValue = Math.max(min, parseInt(textSizeSlider.value) - step);
                textSizeSlider.value = newValue;
                textSizeSlider.dispatchEvent(new Event('change', {'bubbles': true}));
            }
        """
    },
    "toggle_screen_reader_mode": {
        "description": "Activer/d√©sactiver le mode lecteur d'√©cran",
        "js_code": """
            // Logique pour basculer le mode lecteur d'√©cran
            const checkboxes = Array.from(document.querySelectorAll('input[type="checkbox"]'));
            const screenReaderCheckbox = checkboxes.find(checkbox => 
                checkbox.parentElement.textContent.includes('Mode lecteur d\'√©cran')
            );
            
            if (screenReaderCheckbox) {
                screenReaderCheckbox.checked = !screenReaderCheckbox.checked;
                screenReaderCheckbox.dispatchEvent(new Event('change', {'bubbles': true}));
            }
        """
    },
    
    # Actions sp√©cifiques par module
    "upload_document": {
        "description": "T√©l√©charger un document",
        "js_code": """
            // Simuler un clic sur le bouton de t√©l√©chargement
            document.querySelector('button.uploadButton').click();
        """
    },
    "analyze_document": {
        "description": "Lancer l'analyse du document",
        "js_code": """
            // Rechercher le bouton d'analyse
            const buttons = Array.from(document.querySelectorAll('button'));
            const analyzeButton = buttons.find(button => 
                button.textContent.includes('Lancer l\'analyse') || 
                button.textContent.includes('üìä')
            );
            
            if (analyzeButton) {
                analyzeButton.click();
            }
        """
    },
    "export_results": {
        "description": "Exporter les r√©sultats",
        "js_code": """
            // Rechercher le bouton d'exportation
            const expanderHeaders = Array.from(document.querySelectorAll('.streamlit-expanderHeader'));
            const exportHeader = expanderHeaders.find(header => 
                header.textContent.includes('Exporter les r√©sultats') || 
                header.textContent.includes('üì•')
            );
            
            if (exportHeader) {
                exportHeader.click();
            }
        """
    }
}

def generate_keyboard_shortcuts_js():
    """
    G√©n√®re le code JavaScript pour g√©rer les raccourcis clavier avanc√©s.
    
    Returns:
        str: Code JavaScript pour les raccourcis clavier
    """
    config = get_accessibility_config()
    
    if not config.keyboard_navigation:
        return ""
    
    # Mapper les raccourcis clavier avec les actions
    shortcuts_map = {}
    for category, shortcuts in config.get_keyboard_shortcuts().items():
        for key, action_desc in shortcuts.items():
            # Rechercher l'action correspondante dans KEYBOARD_ACTIONS
            action_key = None
            for possible_action, details in KEYBOARD_ACTIONS.items():
                if details["description"].lower() == action_desc.lower():
                    action_key = possible_action
                    break
            
            # Si aucune action trouv√©e, utiliser une action par d√©faut
            if action_key is None:
                # Cr√©er une action g√©n√©rique qui affiche un message
                action_key = f"custom_{key.lower().replace('+', '_')}"
                KEYBOARD_ACTIONS[action_key] = {
                    "description": action_desc,
                    "js_code": f"""
                        console.log("Action: {action_desc}");
                        // Annoncer l'action aux lecteurs d'√©cran
                        announceToScreenReader("Action: {action_desc}");
                    """
                }
            
            # Convertir la cl√© en format JavaScript
            key_code = key.replace("Alt+", "alt+").replace("Maj+", "shift+").replace("Ctrl+", "ctrl+").replace("√âchap", "escape").lower()
            shortcuts_map[key_code] = action_key
    
    # Cr√©er le JavaScript avec les actions d√©taill√©es
    js_code = f"""
    <script>
    // Configuration des raccourcis clavier pour ValetIA
    const keyboardActions = {json.dumps(KEYBOARD_ACTIONS)};
    const keyboardShortcuts = {json.dumps(shortcuts_map)};
    
    // Fonction pour annoncer aux lecteurs d'√©cran
    function announceToScreenReader(message) {{
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'assertive');
        announcement.classList.add('sr-only');
        announcement.textContent = message;
        document.body.appendChild(announcement);
        
        // Supprimer apr√®s l'annonce
        setTimeout(() => {{
            document.body.removeChild(announcement);
        }}, 1000);
    }}
    
    // Gestionnaire d'√©v√©nements pour les raccourcis clavier
    document.addEventListener('keydown', function(e) {{
        // Construire la combinaison de touches
        let keyCombo = '';
        if (e.altKey) keyCombo += 'alt+';
        if (e.shiftKey) keyCombo += 'shift+';
        if (e.ctrlKey) keyCombo += 'ctrl+';
        keyCombo += e.key.toLowerCase();
        
        // V√©rifier si un raccourci existe
        if (keyboardShortcuts[keyCombo]) {{
            const actionKey = keyboardShortcuts[keyCombo];
            
            // Emp√™cher le comportement par d√©faut pour √©viter les conflits
            e.preventDefault();
            
            console.log('Raccourci clavier: ' + keyCombo + ' -> ' + actionKey);
            
            // Ex√©cuter l'action correspondante si elle existe
            if (keyboardActions[actionKey]) {{
                try {{
                    // Ex√©cuter le code JavaScript de l'action
                    eval(keyboardActions[actionKey].js_code);
                    
                    // Annoncer l'action pour les lecteurs d'√©cran
                    announceToScreenReader('Action: ' + keyboardActions[actionKey].description);
                }} catch (error) {{
                    console.error('Erreur lors de l\\'ex√©cution de l\\'action: ' + error);
                }}
            }}
        }}
    }});
    
    // Ajouter des attributs ARIA pour am√©liorer l'accessibilit√©
    document.addEventListener('DOMContentLoaded', function() {{
        // Ajouter des informations sur les raccourcis clavier aux √©l√©ments
        const shortcutDocs = {{}};
        
        // Extraire les descriptions de raccourcis par fonctionnalit√©
        for (const [combo, actionKey] of Object.entries(keyboardShortcuts)) {{
            const actionDesc = keyboardActions[actionKey]?.description || actionKey;
            shortcutDocs[actionDesc] = (shortcutDocs[actionDesc] || []).concat(combo);
        }}
        
        // Parcourir les √©l√©ments de l'interface pour ajouter les informations de raccourcis
        setTimeout(() => {{
            // Ajouter des conseils pour les boutons
            document.querySelectorAll('button').forEach(button => {{
                const buttonText = button.textContent.trim().toLowerCase();
                
                // Trouver le raccourci correspondant au texte du bouton
                for (const [desc, combos] of Object.entries(shortcutDocs)) {{
                    if (desc.toLowerCase().includes(buttonText) || buttonText.includes(desc.toLowerCase())) {{
                        // Ajouter l'attribut aria-keyshortcuts
                        button.setAttribute('aria-keyshortcuts', combos.join(' '));
                        
                        // Ajouter un tooltip
                        const title = button.getAttribute('title') || '';
                        button.setAttribute('title', `${{title}} Raccourci: ${{combos.join(', ')}}`);
                    }}
                }}
            }});
        }}, 1000);
    }});
    </script>
    """
    
    return js_code

def inject_keyboard_navigation():
    """
    Injecte le JavaScript pour la navigation avanc√©e au clavier.
    """
    js_code = generate_keyboard_shortcuts_js()
    if js_code:
        st.markdown(js_code, unsafe_allow_html=True)
        logger.info("JavaScript pour la navigation avanc√©e au clavier inject√©")
